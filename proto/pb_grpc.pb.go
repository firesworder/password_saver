// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc3
// source: proto/pb.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PasswordSaver_RegisterUser_FullMethodName           = "/PasswordSaver/RegisterUser"
	PasswordSaver_LoginUser_FullMethodName              = "/PasswordSaver/LoginUser"
	PasswordSaver_AddTextDataRecord_FullMethodName      = "/PasswordSaver/AddTextDataRecord"
	PasswordSaver_UpdateTextDataRecord_FullMethodName   = "/PasswordSaver/UpdateTextDataRecord"
	PasswordSaver_DeleteTextDataRecord_FullMethodName   = "/PasswordSaver/DeleteTextDataRecord"
	PasswordSaver_AddBankDataRecord_FullMethodName      = "/PasswordSaver/AddBankDataRecord"
	PasswordSaver_UpdateBankDataRecord_FullMethodName   = "/PasswordSaver/UpdateBankDataRecord"
	PasswordSaver_DeleteBankDataRecord_FullMethodName   = "/PasswordSaver/DeleteBankDataRecord"
	PasswordSaver_AddBinaryDataRecord_FullMethodName    = "/PasswordSaver/AddBinaryDataRecord"
	PasswordSaver_UpdateBinaryDataRecord_FullMethodName = "/PasswordSaver/UpdateBinaryDataRecord"
	PasswordSaver_DeleteBinaryDataRecord_FullMethodName = "/PasswordSaver/DeleteBinaryDataRecord"
	PasswordSaver_GetAllRecords_FullMethodName          = "/PasswordSaver/GetAllRecords"
)

// PasswordSaverClient is the client API for PasswordSaver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordSaverClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	// для работы с текстовыми приватными данными
	AddTextDataRecord(ctx context.Context, in *AddTextDataRequest, opts ...grpc.CallOption) (*AddTextDataResponse, error)
	UpdateTextDataRecord(ctx context.Context, in *UpdateTextDataRequest, opts ...grpc.CallOption) (*UpdateTextDataResponse, error)
	DeleteTextDataRecord(ctx context.Context, in *DeleteTextDataRequest, opts ...grpc.CallOption) (*DeleteTextDataResponse, error)
	// для работы с банковскими приватными данными
	AddBankDataRecord(ctx context.Context, in *AddBankDataRequest, opts ...grpc.CallOption) (*AddBankDataResponse, error)
	UpdateBankDataRecord(ctx context.Context, in *UpdateBankDataRequest, opts ...grpc.CallOption) (*UpdateBankDataResponse, error)
	DeleteBankDataRecord(ctx context.Context, in *DeleteBankDataRequest, opts ...grpc.CallOption) (*DeleteBankDataResponse, error)
	// для работы с бинарными приватными данными
	AddBinaryDataRecord(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error)
	UpdateBinaryDataRecord(ctx context.Context, in *UpdateBinaryDataRequest, opts ...grpc.CallOption) (*UpdateBinaryDataResponse, error)
	DeleteBinaryDataRecord(ctx context.Context, in *DeleteBinaryDataRequest, opts ...grpc.CallOption) (*DeleteBinaryDataResponse, error)
	// показать все приватные данные
	GetAllRecords(ctx context.Context, in *GetAllRecordsRequest, opts ...grpc.CallOption) (*GetAllRecordsResponse, error)
}

type passwordSaverClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordSaverClient(cc grpc.ClientConnInterface) PasswordSaverClient {
	return &passwordSaverClient{cc}
}

func (c *passwordSaverClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) AddTextDataRecord(ctx context.Context, in *AddTextDataRequest, opts ...grpc.CallOption) (*AddTextDataResponse, error) {
	out := new(AddTextDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_AddTextDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) UpdateTextDataRecord(ctx context.Context, in *UpdateTextDataRequest, opts ...grpc.CallOption) (*UpdateTextDataResponse, error) {
	out := new(UpdateTextDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_UpdateTextDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) DeleteTextDataRecord(ctx context.Context, in *DeleteTextDataRequest, opts ...grpc.CallOption) (*DeleteTextDataResponse, error) {
	out := new(DeleteTextDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_DeleteTextDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) AddBankDataRecord(ctx context.Context, in *AddBankDataRequest, opts ...grpc.CallOption) (*AddBankDataResponse, error) {
	out := new(AddBankDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_AddBankDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) UpdateBankDataRecord(ctx context.Context, in *UpdateBankDataRequest, opts ...grpc.CallOption) (*UpdateBankDataResponse, error) {
	out := new(UpdateBankDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_UpdateBankDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) DeleteBankDataRecord(ctx context.Context, in *DeleteBankDataRequest, opts ...grpc.CallOption) (*DeleteBankDataResponse, error) {
	out := new(DeleteBankDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_DeleteBankDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) AddBinaryDataRecord(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error) {
	out := new(AddBinaryDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_AddBinaryDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) UpdateBinaryDataRecord(ctx context.Context, in *UpdateBinaryDataRequest, opts ...grpc.CallOption) (*UpdateBinaryDataResponse, error) {
	out := new(UpdateBinaryDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_UpdateBinaryDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) DeleteBinaryDataRecord(ctx context.Context, in *DeleteBinaryDataRequest, opts ...grpc.CallOption) (*DeleteBinaryDataResponse, error) {
	out := new(DeleteBinaryDataResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_DeleteBinaryDataRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordSaverClient) GetAllRecords(ctx context.Context, in *GetAllRecordsRequest, opts ...grpc.CallOption) (*GetAllRecordsResponse, error) {
	out := new(GetAllRecordsResponse)
	err := c.cc.Invoke(ctx, PasswordSaver_GetAllRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordSaverServer is the server API for PasswordSaver service.
// All implementations must embed UnimplementedPasswordSaverServer
// for forward compatibility
type PasswordSaverServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	// для работы с текстовыми приватными данными
	AddTextDataRecord(context.Context, *AddTextDataRequest) (*AddTextDataResponse, error)
	UpdateTextDataRecord(context.Context, *UpdateTextDataRequest) (*UpdateTextDataResponse, error)
	DeleteTextDataRecord(context.Context, *DeleteTextDataRequest) (*DeleteTextDataResponse, error)
	// для работы с банковскими приватными данными
	AddBankDataRecord(context.Context, *AddBankDataRequest) (*AddBankDataResponse, error)
	UpdateBankDataRecord(context.Context, *UpdateBankDataRequest) (*UpdateBankDataResponse, error)
	DeleteBankDataRecord(context.Context, *DeleteBankDataRequest) (*DeleteBankDataResponse, error)
	// для работы с бинарными приватными данными
	AddBinaryDataRecord(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error)
	UpdateBinaryDataRecord(context.Context, *UpdateBinaryDataRequest) (*UpdateBinaryDataResponse, error)
	DeleteBinaryDataRecord(context.Context, *DeleteBinaryDataRequest) (*DeleteBinaryDataResponse, error)
	// показать все приватные данные
	GetAllRecords(context.Context, *GetAllRecordsRequest) (*GetAllRecordsResponse, error)
	mustEmbedUnimplementedPasswordSaverServer()
}

// UnimplementedPasswordSaverServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordSaverServer struct {
}

func (UnimplementedPasswordSaverServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPasswordSaverServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedPasswordSaverServer) AddTextDataRecord(context.Context, *AddTextDataRequest) (*AddTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTextDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) UpdateTextDataRecord(context.Context, *UpdateTextDataRequest) (*UpdateTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) DeleteTextDataRecord(context.Context, *DeleteTextDataRequest) (*DeleteTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) AddBankDataRecord(context.Context, *AddBankDataRequest) (*AddBankDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) UpdateBankDataRecord(context.Context, *UpdateBankDataRequest) (*UpdateBankDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) DeleteBankDataRecord(context.Context, *DeleteBankDataRequest) (*DeleteBankDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) AddBinaryDataRecord(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) UpdateBinaryDataRecord(context.Context, *UpdateBinaryDataRequest) (*UpdateBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinaryDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) DeleteBinaryDataRecord(context.Context, *DeleteBinaryDataRequest) (*DeleteBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinaryDataRecord not implemented")
}
func (UnimplementedPasswordSaverServer) GetAllRecords(context.Context, *GetAllRecordsRequest) (*GetAllRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecords not implemented")
}
func (UnimplementedPasswordSaverServer) mustEmbedUnimplementedPasswordSaverServer() {}

// UnsafePasswordSaverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordSaverServer will
// result in compilation errors.
type UnsafePasswordSaverServer interface {
	mustEmbedUnimplementedPasswordSaverServer()
}

func RegisterPasswordSaverServer(s grpc.ServiceRegistrar, srv PasswordSaverServer) {
	s.RegisterService(&PasswordSaver_ServiceDesc, srv)
}

func _PasswordSaver_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_AddTextDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).AddTextDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_AddTextDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).AddTextDataRecord(ctx, req.(*AddTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_UpdateTextDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).UpdateTextDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_UpdateTextDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).UpdateTextDataRecord(ctx, req.(*UpdateTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_DeleteTextDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).DeleteTextDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_DeleteTextDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).DeleteTextDataRecord(ctx, req.(*DeleteTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_AddBankDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).AddBankDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_AddBankDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).AddBankDataRecord(ctx, req.(*AddBankDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_UpdateBankDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).UpdateBankDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_UpdateBankDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).UpdateBankDataRecord(ctx, req.(*UpdateBankDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_DeleteBankDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).DeleteBankDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_DeleteBankDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).DeleteBankDataRecord(ctx, req.(*DeleteBankDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_AddBinaryDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).AddBinaryDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_AddBinaryDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).AddBinaryDataRecord(ctx, req.(*AddBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_UpdateBinaryDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).UpdateBinaryDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_UpdateBinaryDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).UpdateBinaryDataRecord(ctx, req.(*UpdateBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_DeleteBinaryDataRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).DeleteBinaryDataRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_DeleteBinaryDataRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).DeleteBinaryDataRecord(ctx, req.(*DeleteBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordSaver_GetAllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordSaverServer).GetAllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordSaver_GetAllRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordSaverServer).GetAllRecords(ctx, req.(*GetAllRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordSaver_ServiceDesc is the grpc.ServiceDesc for PasswordSaver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordSaver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PasswordSaver",
	HandlerType: (*PasswordSaverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _PasswordSaver_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _PasswordSaver_LoginUser_Handler,
		},
		{
			MethodName: "AddTextDataRecord",
			Handler:    _PasswordSaver_AddTextDataRecord_Handler,
		},
		{
			MethodName: "UpdateTextDataRecord",
			Handler:    _PasswordSaver_UpdateTextDataRecord_Handler,
		},
		{
			MethodName: "DeleteTextDataRecord",
			Handler:    _PasswordSaver_DeleteTextDataRecord_Handler,
		},
		{
			MethodName: "AddBankDataRecord",
			Handler:    _PasswordSaver_AddBankDataRecord_Handler,
		},
		{
			MethodName: "UpdateBankDataRecord",
			Handler:    _PasswordSaver_UpdateBankDataRecord_Handler,
		},
		{
			MethodName: "DeleteBankDataRecord",
			Handler:    _PasswordSaver_DeleteBankDataRecord_Handler,
		},
		{
			MethodName: "AddBinaryDataRecord",
			Handler:    _PasswordSaver_AddBinaryDataRecord_Handler,
		},
		{
			MethodName: "UpdateBinaryDataRecord",
			Handler:    _PasswordSaver_UpdateBinaryDataRecord_Handler,
		},
		{
			MethodName: "DeleteBinaryDataRecord",
			Handler:    _PasswordSaver_DeleteBinaryDataRecord_Handler,
		},
		{
			MethodName: "GetAllRecords",
			Handler:    _PasswordSaver_GetAllRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pb.proto",
}
